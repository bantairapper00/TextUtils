{"ast":null,"code":"var _jsxFileName = \"E:\\\\Computer science\\\\React\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css'; // import Accordion from './Components/Accordion';\n\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === `light`) {\n      setMode(`dark`);\n      document.body.style.backgroundColor = \"#313131\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n  };\n\n  const showAlert = (mess, type) => {\n    setAlert({\n      message: mess,\n      type: type\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      title: \"Textutils\",\n      aboutText: \"About Textutils\",\n      mode: mode,\n      toggleMode: toggleMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextForm, {\n      heading: \"Enter the text to analyse\",\n      mode: mode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"0HOcw1k7gBoZtgDKz+uDOLkRLtw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["E:/Computer science/React/my-app/src/App.js"],"names":["React","useState","Navbar","TextForm","Alert","App","mode","setMode","alert","setAlert","toggleMode","document","body","style","backgroundColor","showAlert","mess","type","message"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP,C,CACA;;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,OAAD,CAAhC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMS,UAAU,GAAG,MAAK;AACtB,QAAGJ,IAAI,KAAM,OAAb,EAAoB;AAClBC,MAAAA,OAAO,CAAE,MAAF,CAAP;AACAI,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsC,SAAtC;AACAC,MAAAA,SAAS,CAAC,mBAAD,EAAsB,SAAtB,CAAT;AACD,KAJD,MAKI;AACFR,MAAAA,OAAO,CAAC,OAAD,CAAP;AACAI,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,eAApB,GAAsC,OAAtC;AACAC,MAAAA,SAAS,CAAC,oBAAD,EAAuB,SAAvB,CAAT;AACD;AACF,GAXD;;AAaA,QAAMA,SAAS,GAAE,CAACC,IAAD,EAAOC,IAAP,KAAe;AAC5BR,IAAAA,QAAQ,CAAC;AACPS,MAAAA,OAAO,EAAEF,IADF;AAEPC,MAAAA,IAAI,EAAEA;AAFC,KAAD,CAAR;AAIH,GALD;;AAMA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAG,WAAhB;AAA4B,MAAA,SAAS,EAAG,iBAAxC;AAA0D,MAAA,IAAI,EAAEX,IAAhE;AAAsE,MAAA,UAAU,EAAII;AAApF;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,QAAD;AAAU,MAAA,OAAO,EAAG,2BAApB;AAAgD,MAAA,IAAI,EAAEJ;AAAtD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAWD;;GAlCQD,G;;KAAAA,G;AAoCT,eAAeA,GAAf","sourcesContent":["\nimport React, { useState } from 'react';\nimport './App.css';\n// import Accordion from './Components/Accordion';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () =>{\n    if(mode === `light`){\n      setMode(`dark`);\n      document.body.style.backgroundColor = \"#313131\";\n      showAlert(\"Dark mode enabled\", \"success\");\n    }\n    else{\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode enabled\", \"success\");\n    }\n  } \n\n  const showAlert =(mess, type) =>{\n      setAlert({\n        message: mess,\n        type: type\n      })\n  }\n  return (\n    <>\n      <Navbar title = \"Textutils\" aboutText = \"About Textutils\" mode={mode} toggleMode = {toggleMode}/>\n      <Alert />\n      <TextForm heading = \"Enter the text to analyse\" mode={mode}/>\n      {/* <Navbar  />         if props are not det then defaultProps will execute */}\n      {/* <br />\n      <hr /> */}\n      {/* <Accordion /> */}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}