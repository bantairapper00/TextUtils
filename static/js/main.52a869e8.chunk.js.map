{"version":3,"sources":["Components/About.js","Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","text","setText","className","id","style","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","border","Navbar","props","mode","to","title","aria-label","aboutText","role","toggleMode","htmlFor","TextForm","heading","rows","value","onChange","event","console","log","target","newTxt","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","newtxt","split","join","count","forEach","element","wordCount","length","Alert","alert","word","newWord","charAt","slice","captalize","message","App","setMode","setAlert","mess","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iNAEe,SAASA,IAEpB,MAA8BC,mBAAS,CACnCC,MAAO,QACPC,gBAAiB,UAFrB,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,EAAwBJ,mBAAS,aAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAmBA,OACI,oCACI,yBAAKC,UAAU,kBACX,wCACA,yBAAKA,UAAU,YAAYC,GAAG,oBAC1B,yBAAKD,UAAU,iBAAiBE,MAAON,GACnC,wBAAII,UAAU,mBAAmBC,GAAG,cAChC,4BAAQD,UAAU,mBAAmBG,KAAK,SAASD,MAAON,EAASQ,iBAAe,WAAWC,iBAAe,eAAeC,gBAAc,OAAOC,gBAAc,eAA9J,sBAIJ,yBAAKN,GAAG,cAAcD,UAAU,mCAAmCQ,kBAAgB,aAAaC,iBAAe,qBAC3G,yBAAKT,UAAU,kBACX,4EADJ,qXAC+a,iDAD/a,kDAKR,yBAAKA,UAAU,iBAAiBE,MAAON,GACnC,wBAAII,UAAU,mBAAmBC,GAAG,cAChC,4BAAQD,UAAU,6BAA6BE,MAAON,EAASO,KAAK,SAASC,iBAAe,WAAWC,iBAAe,eAAeC,gBAAc,QAAQC,gBAAc,eAAzK,sBAIJ,yBAAKN,GAAG,cAAcD,UAAU,8BAA8BQ,kBAAgB,aAAaC,iBAAe,qBACtG,yBAAKT,UAAU,kBACX,6EADJ,sXACib,iDADjb,kDAKR,yBAAKA,UAAU,iBAAiBE,MAAON,GACnC,wBAAII,UAAU,mBAAmBC,GAAG,gBAChC,4BAAQD,UAAU,6BAA6BE,MAAON,EAASO,KAAK,SAASC,iBAAe,WAAWC,iBAAe,iBAAiBC,gBAAc,QAAQC,gBAAc,iBAA3K,sBAIJ,yBAAKN,GAAG,gBAAgBD,UAAU,8BAA8BQ,kBAAgB,eAAeC,iBAAe,qBAC1G,yBAAKT,UAAU,kBACX,4EADJ,sXACgb,iDADhb,mDAMZ,4BAAQG,KAAK,SAASH,UAAU,oBAAoBU,QA3DjD,WACW,UAAlBd,EAAQF,OACRG,EAAW,CACPH,MAAO,QACPC,gBAAiB,QACjBgB,OAAQ,sBAEZZ,EAAQ,gBAGRF,EAAW,CACPH,MAAO,QACPC,gBAAiB,UAErBI,EAAQ,gBA6CkED,K,WClEvE,SAASc,EAAOC,GAE3B,OACI,yBAAKb,UAAS,yCAAoCa,EAAMC,KAA1C,eAAqDD,EAAMC,OACrE,yBAAKd,UAAU,mBACX,kBAAC,IAAD,CAAMA,UAAU,eAAee,GAAG,KAAKF,EAAMG,OAC7C,4BAAQhB,UAAU,iBAAiBG,KAAK,SAASC,iBAAe,WAAWC,iBAAe,0BAA0BE,gBAAc,yBAAyBD,gBAAc,QAAQW,aAAW,qBACxL,0BAAMjB,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BC,GAAG,0BACzC,wBAAID,UAAU,mCACV,wBAAIA,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,kBAAkBe,GAAG,KAArC,SAEJ,wBAAIf,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWe,GAAG,UAAUF,EAAMK,aAGtD,yBAAKlB,UAAU,0BACX,2BAAOA,UAAU,mBAAmBG,KAAK,WAAWgB,KAAK,SAASlB,GAAG,yBAAyBS,QAASG,EAAMO,aAC7G,2BAAOpB,UAAU,mBAAmBqB,QAAQ,yBAAyBnB,MAAO,CAACR,MAAoB,UAAbmB,EAAMC,KAAe,QAAS,UAAlH,iBCrBT,SAASQ,EAAST,GAK7B,MAAwBpB,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KA+CA,OACI,oCACI,yBAAKC,UAAU,kBACX,wBAAIE,MAAO,CAACR,MAAsB,UAAfmB,EAAMC,KAAiB,QAAQ,UAAWD,EAAMU,SACnE,yBAAKvB,UAAU,QACX,8BAAUA,UAAU,eAAeC,GAAG,SAASuB,KAAK,KAAKC,MAAO3B,EAAM4B,SA1C/D,SAACC,GACpBC,QAAQC,IAAI,aACZ9B,EAAQ4B,EAAMG,OAAOL,QAwCuFvB,MAAO,CAACP,gBAA8B,UAAbkB,EAAMC,KAAe,QAAQ,UAAWpB,MAAoB,UAAbmB,EAAMC,KAAe,QAAQ,YAEzM,4BAAQd,UAAU,kBAAkBU,QApD1B,WAClBkB,QAAQC,IAAI,yBACZ,IAAIE,EAASjC,EAAKkC,cAClBjC,EAAQgC,GACRlB,EAAMoB,UAAU,yBAA0B,aAgDlC,wBACA,4BAAQjC,UAAU,uBAAuBU,QAxC7B,WACpBX,EAAQD,EAAKoC,eACbrB,EAAMoB,UAAU,yBAA0B,aAsClC,wBACA,4BAAQjC,UAAU,mBAAmBU,QAzB/B,WACdyB,UAAUC,UAAUC,UAAUvC,GAC9Be,EAAMoB,UAAU,uBAAwB,aAuBhC,aACA,4BAAQjC,UAAU,uBAAuBU,QArB7B,WACpBkB,QAAQC,IAAI,SACZ,IAAIS,EAASxC,EAAKyC,MAAM,QACxBxC,EAAQuC,EAAOE,KAAK,QAkBZ,sBACA,4BAAQxC,UAAU,mBAAmBU,QAhBnC,WACVX,EAAQ,IACRc,EAAMoB,UAAU,wBAAyB,aAcjC,UAEJ,yBAAKjC,UAAU,iBAAiBE,MAAO,CAACR,MAAsB,UAAfmB,EAAMC,KAAiB,QAAQ,UAC1E,iDACA,2BA1CM,WACd,IAAI2B,EAAQ,EAOZ,OANQ3C,EAAKyC,MAAM,KACjBG,SAAQ,SAASC,GACA,KAAZA,GACCF,OAGDA,EAkCKG,GAAJ,cAA4B9C,EAAK+C,OAAjC,eACA,uCACA,2BAAW,KAAP/C,EAAU,0BAA0BA,KCtEzC,SAASgD,EAAMjC,GAK1B,OACIA,EAAMkC,OAAS,6BACX,yBAAK/C,UAAU,sBAAsBmB,KAAK,SACtC,gCAPM,SAAC6B,GACf,IAAIC,EAAUD,EAAKd,cACnB,OAAOe,EAAQC,OAAO,GAAGlB,cAAgBiB,EAAQE,MAAM,GAKtCC,CAAUvC,EAAMkC,MAAM5C,OADnC,KACqDU,EAAMkC,MAAMM,U,WC+C9DC,MA1Cf,WACE,MAAwB7D,mBAAS,SAAjC,mBAAOqB,EAAP,KAAayC,EAAb,KACA,EAA0B9D,mBAAS,MAAnC,mBAAOsD,EAAP,KAAcS,EAAd,KAeMvB,EAAY,SAACwB,EAAMtD,GACvBqD,EAAS,CACPH,QAASI,EACTtD,KAAMA,IAERuD,YAAW,WACTF,EAAS,QACR,OAEL,OACE,oCACE,kBAAC,IAAD,KACE,kBAAC5C,EAAD,CAAQI,MAAM,YAAYE,UAAU,QAAQJ,KAAMA,EAAMM,WAzB3C,WACT,UAAJN,GACFyC,EAAQ,QACRI,SAASC,KAAK1D,MAAMP,gBAAkB,UACtCsC,EAAU,6BAA8B,aAGxCsB,EAAQ,SACRI,SAASC,KAAK1D,MAAMP,gBAAkB,QACtCsC,EAAU,8BAA+B,eAiBvC,kBAACa,EAAD,CAAOC,MAAOA,IACd,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASnB,QAAS,kBAACnD,EAAD,QAEpC,kBAAC,IAAD,CAAOqE,OAAK,EAACC,KAAK,aAAanB,QAAS,kBAACrB,EAAD,CAAUC,QAAQ,4BAA4BT,KAAMA,EAAMmB,UAAWA,UCrCxG8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASgB,eAAe,SAM1BZ,K","file":"static/js/main.52a869e8.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function About() {\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    })\r\n\r\n    const [text, setText] = useState(\"Dark Mode\");\r\n\r\n    const toggle = () => {\r\n        if (myStyle.color === \"black\") {\r\n            setMyStyle({\r\n                color: \"white\",\r\n                backgroundColor: \"black\",\r\n                border: \"0.5px solid white\"\r\n            })\r\n            setText(\"Light Mode\");\r\n        }\r\n        else {\r\n            setMyStyle({\r\n                color: \"black\",\r\n                backgroundColor: \"white\"\r\n            })\r\n            setText(\"Dark Mode\");\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <h2>About Me</h2>\r\n                <div className=\"accordion\" id=\"accordionExample\">\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                            <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                                Accordion Item #1\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                                Accordion Item #2\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"accordion-item\" style={myStyle}>\r\n                        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                            <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                                Accordion Item #3\r\n                            </button>\r\n                        </h2>\r\n                        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                            <div className=\"accordion-body\">\r\n                                <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-dark my-2\" onClick={toggle}>{text}</button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";      // write rfc to write react function based component\r\nimport PropTypes from 'prop-types'; //write impt to import prop-types\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    \r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div className=\"form-check form-switch\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" style={{color: props.mode===\"light\"?\"black\": \"white\"}}>Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,                  //pts to wite PropType.string\r\n    aboutText: PropTypes.string\r\n}\r\n\r\n// default porps\r\n// Navbar.defaultProps = {\r\n//     title: \"Set title here\",\r\n//     aboutText: \"About text here\",\r\n// };\r\n\r\n","import React, { useState } from \"react\";\r\n\r\n\r\nexport default function TextForm(props) {\r\n    // function handleUpClick(){\r\n    //     console.log(\"Uppercase was clicked\")\r\n    // }\r\n\r\n    const [text, setText] = useState(\"\")\r\n\r\n    const handleUpClick = () => {\r\n        console.log(\"Uppercase was clicked\");\r\n        let newTxt = text.toUpperCase();\r\n        setText(newTxt);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n        \r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleDownClick = () =>{\r\n        setText(text.toLowerCase());\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n    }\r\n\r\n    const wordCount = () =>{\r\n        let count = 0;\r\n        let a = text.split(' ');\r\n        a.forEach(function(element){\r\n            if(element !== ''){\r\n                count++;\r\n            }\r\n        })\r\n        return count;\r\n    }\r\n\r\n    const handleCopy =() =>{\r\n        navigator.clipboard.writeText(text)\r\n        props.showAlert(\"Text has been copied\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpace =() => {\r\n        console.log(\"hello\")\r\n        let newtxt = text.split(/[ ]+/);\r\n        setText(newtxt.join(' '));\r\n    }\r\n\r\n    const clear = () =>{\r\n        setText(\"\")\r\n        props.showAlert(\"Text has been cleared\", \"success\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <h1 style={{color: props.mode === \"light\"?\"black\":\"white\"}}>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" id=\"my-box\" rows=\"10\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode===\"light\"?\"white\":\"#525252\", color: props.mode===\"light\"?\"black\":\"white\"}}></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to uppercase</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleDownClick}>Convert to lowercase</button>\r\n                <button className=\"btn btn-primary \" onClick={handleCopy}>Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpace}>Remove extra space</button>\r\n                <button className=\"btn btn-primary \" onClick={clear}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode === \"light\"?\"black\":\"white\"}}>\r\n                <h2>Your text summary</h2>\r\n                <p>{wordCount()} words and {text.length} characters</p>\r\n                <h2>Preview</h2>\r\n                <p>{text===''?\"Preview your text here.\":text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props){\r\n    const captalize = (word) =>{\r\n        let newWord = word.toLowerCase();\r\n        return newWord.charAt(0).toUpperCase() + newWord.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div>\r\n            <div className=\"alert alert-success\" role=\"alert\">\r\n                <strong>{captalize(props.alert.type)}</strong>: {props.alert.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}","\nimport React, { useState } from 'react';\nimport './App.css';\nimport About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport Alert from './Components/Alert';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const toggleMode = () => {\n    if (mode === `light`) {\n      setMode(`dark`);\n      document.body.style.backgroundColor = \"#313131\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n\n  const showAlert = (mess, type) => {\n    setAlert({\n      message: mess,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  return (\n    <>\n      <Router>\n        <Navbar title=\"Textutils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <Routes>\n          <Route exact path=\"/about\" element={<About />}>\n          </Route>\n          <Route exact path=\"/TextUtils\" element={<TextForm heading=\"Enter the text to analyse\" mode={mode} showAlert={showAlert} />}> \n          </Route>\n        </Routes>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}